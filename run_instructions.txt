# ü¶∫ SAFETY COMPLIANCE DETECTION SYSTEM
# INSTALLATION AND RUN INSTRUCTIONS
===============================================

## QUICK START (5 MINUTES)
1. Open terminal/command prompt
2. Navigate to project folder: cd safety-compliance-detection
3. Install dependencies: pip install -r requirements.txt
4. Run application: streamlit run app.py
5. Open browser to: http://localhost:8501

## DETAILED INSTALLATION GUIDE
===============================================

### STEP 1: VERIFY PYTHON INSTALLATION
- Open terminal/command prompt
- Check Python version: python --version
- Required: Python 3.8 or higher
- If not installed: Download from https://python.org

### STEP 2: CREATE VIRTUAL ENVIRONMENT (RECOMMENDED)
Windows:
  python -m venv safety_env
  safety_env\Scripts\activate

macOS/Linux:
  python -m venv safety_env
  source safety_env/bin/activate

### STEP 3: INSTALL DEPENDENCIES
- Run: pip install --upgrade pip
- Run: pip install -r requirements.txt
- Wait for installation (may take 5-10 minutes)
- First run will download YOLOv8 models (~50MB)

### STEP 4: RUN THE APPLICATION
- Run: streamlit run app.py
- Streamlit will automatically open your browser
- If not, manually go to: http://localhost:8501

### STEP 5: TEST THE SYSTEM
- Try "Demo Mode" first to test functionality
- Upload a construction site image with people
- Or use webcam to take a photo
- View detection results and compliance summary

## TROUBLESHOOTING GUIDE
===============================================

### COMMON ISSUES AND SOLUTIONS:

1. **"ModuleNotFoundError" errors:**
   - Solution: pip install -r requirements.txt --force-reinstall
   - Make sure virtual environment is activated

2. **"Models not loading" error:**
   - Ensure stable internet connection
   - Models download automatically on first use
   - Try: pip uninstall ultralytics && pip install ultralytics

3. **"Camera not working" in webcam mode:**
   - Grant camera permissions to your browser
   - Close other apps using the camera
   - Try different browsers (Chrome recommended)

4. **Slow performance:**
   - Use smaller images (resize before upload)
   - Close other applications to free memory
   - Consider using GPU acceleration (see below)

5. **"Streamlit command not found":**
   - Make sure virtual environment is activated
   - Try: python -m streamlit run app.py

### GPU ACCELERATION (OPTIONAL)
For faster processing with NVIDIA GPU:
- Install CUDA toolkit from NVIDIA
- Run: pip install torch torchvision --extra-index-url https://download.pytorch.org/whl/cu118
- Restart the application

### MEMORY REQUIREMENTS
- Minimum: 4GB RAM
- Recommended: 8GB RAM
- Storage: 2GB free space
- GPU: Optional but recommended for real-time processing

## USAGE INSTRUCTIONS
===============================================

### UPLOAD IMAGE MODE:
1. Click "Upload Image" in sidebar
2. Select construction site image (JPG, PNG, etc.)
3. Wait for processing (5-15 seconds)
4. View detection results and compliance summary

### WEBCAM MODE:
1. Click "Use Webcam" in sidebar
2. Allow camera permissions when prompted
3. Click "Take a picture"
4. View instant analysis results

### DEMO MODE:
1. Click "Demo Images" in sidebar
2. Select compliance scenario
3. Click "Run Demo Analysis"
4. Explore different compliance levels

### CONFIGURATION:
- Adjust "Detection Confidence Threshold" in sidebar
- Higher values = fewer false positives
- Lower values = more detections (may include false positives)

## SYSTEM FEATURES
===============================================

### DETECTION CAPABILITIES:
‚úÖ Person Detection (YOLOv8 AI)
‚úÖ Helmet Detection (AI + Computer Vision)
‚úÖ Face Mask Detection (Color + Edge Analysis)
‚úÖ Safety Vest Detection (High-visibility Colors)
‚úÖ Compliance Scoring (Individual + Overall)
‚úÖ Visual Annotations (Bounding Boxes + Status)

### REPORTING FEATURES:
üìä Real-time Compliance Dashboard
üìà Individual Person Analysis
üìã Equipment-specific Statistics
‚ö†Ô∏è Violation Identification
üìÑ Detailed Compliance Reports
üéØ Recommendations for Improvement

## CUSTOMIZATION OPTIONS
===============================================

### DETECTION SENSITIVITY:
- Modify confidence thresholds in app.py
- Adjust color detection ranges in utils.py
- Fine-tune equipment detection parameters

### VISUAL CUSTOMIZATION:
- Edit CSS styling in app.py
- Modify color schemes and layouts
- Add company branding and logos

### ADDING NEW EQUIPMENT:
- Extend detection functions in utils.py
- Update compliance calculation logic
- Add new equipment types to UI

## PRODUCTION DEPLOYMENT
===============================================

### FOR PRODUCTION USE:
1. Use custom trained models for better accuracy
2. Implement database logging for compliance records
3. Add user authentication and access control
4. Set up automated reporting and alerts
5. Consider GPU servers for real-time processing

### SCALING CONSIDERATIONS:
- Use load balancers for multiple users
- Implement caching for better performance
- Consider cloud deployment (AWS, Azure, GCP)
- Add monitoring and logging systems

## SUPPORT AND RESOURCES
===============================================

### GETTING HELP:
- Check README.md for detailed documentation
- Review troubleshooting section above
- Test with demo mode first
- Ensure all dependencies are installed correctly

### SYSTEM REQUIREMENTS SUMMARY:
- Python 3.8+ (3.9+ recommended)
- 4GB RAM minimum (8GB recommended)
- 2GB free disk space
- Internet connection (for model download)
- Modern web browser (Chrome, Firefox, Safari)
- Webcam (optional, for camera mode)

### PERFORMANCE TIPS:
- Use virtual environment to avoid conflicts
- Close unnecessary applications while running
- Use smaller images for faster processing
- Consider GPU acceleration for production use
- Monitor system resources during operation

===============================================
üèóÔ∏è SAFETY COMPLIANCE DETECTION SYSTEM
Built with Streamlit, YOLOv8, and OpenCV
Ensuring workplace safety through AI monitoring
===============================================